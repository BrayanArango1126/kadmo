package co.edu.ue.controller;

import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import co.edu.ue.dto.EstadosTransaccionesDTO;
import co.edu.ue.entity.EstadosTransacciones;
import co.edu.ue.service.IEstadosTransaccionesService;
import io.swagger.v3.oas.annotations.parameters.RequestBody;

@RestController
@CrossOrigin("*")
@RequestMapping(value="estado-transaccion")

public class EstadosTransaccionesController {
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	IEstadosTransaccionesService service;

	@GetMapping(value="estados-transacciones", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<EstadosTransaccionesDTO>> getAllEstadosTransacciones() {
		return new ResponseEntity<List<EstadosTransaccionesDTO>> ( this.service.listAllEstadosTransacciones(), HttpStatus.ACCEPTED);
	}
	
	@GetMapping(value="estado-transaccion-id", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<EstadosTransaccionesDTO> getByIdEstadosTransacciones(@RequestParam("idEstadoTransaccion") int id) {
		return new ResponseEntity<EstadosTransaccionesDTO>( this.service.findIdEstadosTransacciones(id), HttpStatus.ACCEPTED);
	}
	
	@PostMapping(value="add-estado-transaccion", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<EstadosTransaccionesDTO> postEstadosTransacciones(@RequestBody EstadosTransaccionesDTO newEstadosTransacciones) {
		if(newEstadosTransacciones.getEstado() == null || newEstadosTransacciones.getEstado().isEmpty()) {
			System.out.println("Datos recibidos: " + newEstadosTransacciones);
			throw new RuntimeException("Hubo un error");
		}
		
		EstadosTransacciones addEstadoTransac = this.modelMapper.map(newEstadosTransacciones, EstadosTransacciones.class);
		
		if(addEstadoTransac.getEstado() == null || addEstadoTransac.getEstado().isEmpty()) {
			throw new RuntimeException("El campo 'estado' no puede ser nulo o vac√≠o");
		}
		
		EstadosTransaccionesDTO addedEstadoTransac = this.service.addEstadosTransacciones(addEstadoTransac);
		return new ResponseEntity<EstadosTransaccionesDTO>( addedEstadoTransac, HttpStatus.CREATED);
	}
	
	@PutMapping(value="update-estado-transaccion", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<EstadosTransaccionesDTO> putEstadosTransacciones(@RequestBody EstadosTransaccionesDTO updateEstadosTransacciones) {
		EstadosTransacciones upEstadoTransac = this.modelMapper.map(updateEstadosTransacciones, EstadosTransacciones.class);
		EstadosTransaccionesDTO updatedEstadoTransac = this.service.upEstadosTransacciones(upEstadoTransac);
		return new ResponseEntity<EstadosTransaccionesDTO>( updatedEstadoTransac, HttpStatus.OK);
	}
}
